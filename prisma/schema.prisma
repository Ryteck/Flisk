// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  accountName String @unique @map("account_name")
  displayName String @map("display_name")
  email       String @unique
  password    String

  groups         Group[]
  projects       Project[]
  projectsMember Member[]

  @@map("users")
}

model Group {
  id   String @id @default(uuid())
  name String
  slug String

  color String
  icon  String

  userId String @map("user_id")
  user   User   @relation(fields: userId, references: id)

  projects Project[]
  members  Member[]

  @@unique([slug, userId])
  @@map("groups")
}

enum MemberType {
  anonymous
  basic
  viewer
  editor

  @@map("member_type")
}

model Member {
  id   String     @id @default(uuid())
  type MemberType

  name  String?
  email String?

  userId String? @map("user_id")
  user   User?   @relation(fields: userId, references: id)

  groupId String @map("group_id")
  group   Group  @relation(fields: groupId, references: id)

  @@map("members")
}

model Project {
  id   String @id @default(uuid())
  name String
  slug String

  color String
  icon  String

  userId String @map("user_id")
  user   User   @relation(fields: userId, references: id)

  groupId String @map("group_id")
  group   Group  @relation(fields: groupId, references: id)

  steps Step[]

  @@unique([slug, groupId])
  @@map("projects")
}

model Step {
  id          String @id @default(uuid())
  name        String
  description String
  order       Int

  projectId String  @map("project_id")
  project   Project @relation(fields: projectId, references: id)

  @@map("steps")
}
